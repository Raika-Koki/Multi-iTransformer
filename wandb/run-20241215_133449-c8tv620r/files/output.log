comp trend
Training trend component with params: {}
/home2/y2021/k2110261/.conda/envs/tensorflow/lib/python3.11/site-packages/torch/nn/modules/transformer.py:379: UserWarning: enable_nested_tensor is True, but self.use_nested_tensor is False because encoder_layer.self_attn.batch_first was not True(use batch_first for better inference performance)
  warnings.warn(
trend Epoch [10/100], Train Loss: 0.0086, Valid Loss: 0.0475
trend Epoch [20/100], Train Loss: 0.0074, Valid Loss: 0.0324
trend Epoch [30/100], Train Loss: 0.0061, Valid Loss: 0.0325
trend Epoch [40/100], Train Loss: 0.0043, Valid Loss: 0.0359
trend Epoch [50/100], Train Loss: 0.0039, Valid Loss: 0.0340
trend Epoch [60/100], Train Loss: 0.0036, Valid Loss: 0.0354
trend Epoch [70/100], Train Loss: 0.0034, Valid Loss: 0.0347
trend Epoch [80/100], Train Loss: 0.0034, Valid Loss: 0.0345
trend Epoch [90/100], Train Loss: 0.0033, Valid Loss: 0.0342
trend Epoch [100/100], Train Loss: 0.0034, Valid Loss: 0.0344
comp seasonal_0
Training seasonal_0 component with params: {}
/home2/y2021/k2110261/.conda/envs/tensorflow/lib/python3.11/site-packages/torch/nn/modules/transformer.py:379: UserWarning: enable_nested_tensor is True, but self.use_nested_tensor is False because encoder_layer.self_attn.batch_first was not True(use batch_first for better inference performance)
  warnings.warn(
seasonal_0 Epoch [10/100], Train Loss: 0.0091, Valid Loss: 0.0463
seasonal_0 Epoch [20/100], Train Loss: 0.0075, Valid Loss: 0.0434
seasonal_0 Epoch [30/100], Train Loss: 0.0060, Valid Loss: 0.0305
seasonal_0 Epoch [40/100], Train Loss: 0.0042, Valid Loss: 0.0412
seasonal_0 Epoch [50/100], Train Loss: 0.0038, Valid Loss: 0.0435
seasonal_0 Epoch [60/100], Train Loss: 0.0035, Valid Loss: 0.0458
seasonal_0 Epoch [70/100], Train Loss: 0.0032, Valid Loss: 0.0444
seasonal_0 Epoch [80/100], Train Loss: 0.0032, Valid Loss: 0.0449
seasonal_0 Epoch [90/100], Train Loss: 0.0032, Valid Loss: 0.0454
seasonal_0 Epoch [100/100], Train Loss: 0.0032, Valid Loss: 0.0451
comp seasonal_1
Training seasonal_1 component with params: {}
seasonal_1 Epoch [10/100], Train Loss: 0.0092, Valid Loss: 0.0389
seasonal_1 Epoch [20/100], Train Loss: 0.0076, Valid Loss: 0.0434
seasonal_1 Epoch [30/100], Train Loss: 0.0066, Valid Loss: 0.0429
seasonal_1 Epoch [40/100], Train Loss: 0.0046, Valid Loss: 0.0390
seasonal_1 Epoch [50/100], Train Loss: 0.0041, Valid Loss: 0.0388
seasonal_1 Epoch [60/100], Train Loss: 0.0039, Valid Loss: 0.0429
seasonal_1 Epoch [70/100], Train Loss: 0.0036, Valid Loss: 0.0415
seasonal_1 Epoch [80/100], Train Loss: 0.0036, Valid Loss: 0.0416
seasonal_1 Epoch [90/100], Train Loss: 0.0035, Valid Loss: 0.0422
seasonal_1 Epoch [100/100], Train Loss: 0.0035, Valid Loss: 0.0422
comp seasonal_2
Training seasonal_2 component with params: {}
seasonal_2 Epoch [10/100], Train Loss: 0.0089, Valid Loss: 0.0327
seasonal_2 Epoch [20/100], Train Loss: 0.0105, Valid Loss: 0.0409
seasonal_2 Epoch [30/100], Train Loss: 0.0067, Valid Loss: 0.0505
seasonal_2 Epoch [40/100], Train Loss: 0.0049, Valid Loss: 0.0416
seasonal_2 Epoch [50/100], Train Loss: 0.0045, Valid Loss: 0.0429
seasonal_2 Epoch [60/100], Train Loss: 0.0042, Valid Loss: 0.0431
seasonal_2 Epoch [70/100], Train Loss: 0.0039, Valid Loss: 0.0445
seasonal_2 Epoch [80/100], Train Loss: 0.0039, Valid Loss: 0.0441
seasonal_2 Epoch [90/100], Train Loss: 0.0038, Valid Loss: 0.0446
seasonal_2 Epoch [100/100], Train Loss: 0.0038, Valid Loss: 0.0446
comp seasonal_3
Training seasonal_3 component with params: {}
seasonal_3 Epoch [10/100], Train Loss: 0.0085, Valid Loss: 0.0399
seasonal_3 Epoch [20/100], Train Loss: 0.0073, Valid Loss: 0.0454
seasonal_3 Epoch [30/100], Train Loss: 0.0057, Valid Loss: 0.0400
seasonal_3 Epoch [40/100], Train Loss: 0.0039, Valid Loss: 0.0426
seasonal_3 Epoch [50/100], Train Loss: 0.0036, Valid Loss: 0.0431
seasonal_3 Epoch [60/100], Train Loss: 0.0033, Valid Loss: 0.0461
seasonal_3 Epoch [70/100], Train Loss: 0.0031, Valid Loss: 0.0442
seasonal_3 Epoch [80/100], Train Loss: 0.0031, Valid Loss: 0.0442
seasonal_3 Epoch [90/100], Train Loss: 0.0030, Valid Loss: 0.0447
seasonal_3 Epoch [100/100], Train Loss: 0.0030, Valid Loss: 0.0446
comp resid
Training resid component with params: {}
resid Epoch [10/100], Train Loss: 0.0093, Valid Loss: 0.0411
resid Epoch [20/100], Train Loss: 0.0084, Valid Loss: 0.0348
resid Epoch [30/100], Train Loss: 0.0114, Valid Loss: 0.0422
resid Epoch [40/100], Train Loss: 0.0098, Valid Loss: 0.0553
resid Epoch [50/100], Train Loss: 0.0097, Valid Loss: 0.0548
resid Epoch [60/100], Train Loss: 0.0095, Valid Loss: 0.0512
resid Epoch [70/100], Train Loss: 0.0094, Valid Loss: 0.0584
resid Epoch [80/100], Train Loss: 0.0094, Valid Loss: 0.0590
resid Epoch [90/100], Train Loss: 0.0093, Valid Loss: 0.0599
resid Epoch [100/100], Train Loss: 0.0093, Valid Loss: 0.0606
Runtime (seconds): 5676.836447238922
/data/student/k2110261/Multi-iTransformer/Transformer.py:563: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  predicted_trend_stock_price = predicted_trend[0, :, 0].cpu().numpy().flatten() * std_lists['trend'][0] + mean_lists['trend'][0]
/data/student/k2110261/Multi-iTransformer/Transformer.py:564: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  predicted_seasonal_0_stock_price = predicted_seasonal_0[0, :, 0].cpu().numpy().flatten() * std_lists['seasonal_0'][0] + mean_lists['seasonal_0'][0]
/data/student/k2110261/Multi-iTransformer/Transformer.py:565: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  predicted_seasonal_1_stock_price = predicted_seasonal_1[0, :, 0].cpu().numpy().flatten() * std_lists['seasonal_1'][0] + mean_lists['seasonal_1'][0]
/data/student/k2110261/Multi-iTransformer/Transformer.py:566: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  predicted_seasonal_2_stock_price = predicted_seasonal_2[0, :, 0].cpu().numpy().flatten() * std_lists['seasonal_2'][0] + mean_lists['seasonal_2'][0]
/data/student/k2110261/Multi-iTransformer/Transformer.py:567: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  predicted_seasonal_3_stock_price = predicted_seasonal_3[0, :, 0].cpu().numpy().flatten() * std_lists['seasonal_3'][0] + mean_lists['seasonal_3'][0]
/data/student/k2110261/Multi-iTransformer/Transformer.py:568: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  predicted_resid_stock_price = predicted_resid[0, :, 0].cpu().numpy().flatten() * std_lists['resid'][0] + mean_lists['resid'][0]
[110.00487632]
[3.2767689]
[-0.43010998]
[-11.84465552]
[-7.57371827]
[-5.45553415]
[87.97762729]
/data/student/k2110261/Multi-iTransformer/Transformer.py:594: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  "real_stock_price": close_data[-1]
