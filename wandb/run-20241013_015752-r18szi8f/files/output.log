[*********************100%%**********************]  1 of 1 completed
[*********************100%%**********************]  1 of 1 completed
[*********************100%%**********************]  1 of 1 completed
[*********************100%%**********************]  1 of 1 completed
[*********************100%%**********************]  1 of 1 completed
{'AAPL': Date
2019-12-31     78.597246
2020-01-02     78.442317
2020-01-03     78.286187
2020-01-06     78.128760
2020-01-07     77.969944
                 ...
2023-05-24    173.117858
2023-05-25    173.456808
2023-05-26    173.795654
2023-05-30    174.134459
2023-05-31    174.473274
Name: trend, Length: 860, dtype: float64, 'GOOGL': Date
2019-12-31     66.804085
2020-01-02     68.264961
2020-01-03     67.907852
2020-01-06     69.717865
2020-01-07     69.583206
                 ...
2023-05-24    120.601372
2023-05-25    123.175003
2023-05-26    124.302208
2023-05-30    123.364525
2023-05-31    122.566505
Name: Adj Close, Length: 860, dtype: float64, 'META': Date
2019-12-31    204.633865
2020-01-02    209.150269
2020-01-03    208.043610
2020-01-06    211.961807
2020-01-07    212.420410
                 ...
2023-05-24    248.461914
2023-05-25    251.931458
2023-05-26    261.253387
2023-05-30    261.731964
2023-05-31    263.925354
Name: Adj Close, Length: 860, dtype: float64, 'AMZN': Date
2019-12-31     92.391998
2020-01-02     94.900497
2020-01-03     93.748497
2020-01-06     95.143997
2020-01-07     95.343002
                 ...
2023-05-24    116.750000
2023-05-25    115.000000
2023-05-26    120.110001
2023-05-30    121.660004
2023-05-31    120.580002
Name: Adj Close, Length: 860, dtype: float64, 'MSFT': Date
2019-12-31    151.139679
2020-01-02    153.938217
2020-01-03    152.021423
2020-01-06    152.414352
2020-01-07    151.024643
                 ...
2023-05-24    310.853607
2023-05-25    322.808411
2023-05-26    329.711884
2023-05-30    328.047882
2023-05-31    325.254822
Name: Adj Close, Length: 860, dtype: float64}
{'AAPL': Date
2019-12-31   -7.656586
2020-01-02   -5.129615
2020-01-03   -5.123076
2020-01-06   -6.031950
2020-01-07   -5.890172
                ...
2023-05-24   -3.198207
2023-05-25   -1.174767
2023-05-26    0.261932
2023-05-30    0.765896
2023-05-31    1.324529
Name: season, Length: 860, dtype: float64, 'GOOGL': Date
2019-12-31     66.804085
2020-01-02     68.264961
2020-01-03     67.907852
2020-01-06     69.717865
2020-01-07     69.583206
                 ...
2023-05-24    120.601372
2023-05-25    123.175003
2023-05-26    124.302208
2023-05-30    123.364525
2023-05-31    122.566505
Name: Adj Close, Length: 860, dtype: float64, 'META': Date
2019-12-31    204.633865
2020-01-02    209.150269
2020-01-03    208.043610
2020-01-06    211.961807
2020-01-07    212.420410
                 ...
2023-05-24    248.461914
2023-05-25    251.931458
2023-05-26    261.253387
2023-05-30    261.731964
2023-05-31    263.925354
Name: Adj Close, Length: 860, dtype: float64, 'AMZN': Date
2019-12-31     92.391998
2020-01-02     94.900497
2020-01-03     93.748497
2020-01-06     95.143997
2020-01-07     95.343002
                 ...
2023-05-24    116.750000
2023-05-25    115.000000
2023-05-26    120.110001
2023-05-30    121.660004
2023-05-31    120.580002
Name: Adj Close, Length: 860, dtype: float64, 'MSFT': Date
2019-12-31    151.139679
2020-01-02    153.938217
2020-01-03    152.021423
2020-01-06    152.414352
2020-01-07    151.024643
                 ...
2023-05-24    310.853607
2023-05-25    322.808411
2023-05-26    329.711884
2023-05-30    328.047882
2023-05-31    325.254822
Name: Adj Close, Length: 860, dtype: float64}
{'AAPL': Date
2019-12-31    0.309782
2020-01-02   -0.436596
2020-01-03   -0.995516
2020-01-06    0.645835
2020-01-07    0.320779
                ...
2023-05-24    0.814938
2023-05-25   -0.404828
2023-05-26    0.243897
2023-05-30    1.259114
2023-05-31    0.311999
Name: resid, Length: 860, dtype: float64, 'GOOGL': Date
2019-12-31     66.804085
2020-01-02     68.264961
2020-01-03     67.907852
2020-01-06     69.717865
2020-01-07     69.583206
                 ...
2023-05-24    120.601372
2023-05-25    123.175003
2023-05-26    124.302208
2023-05-30    123.364525
2023-05-31    122.566505
Name: Adj Close, Length: 860, dtype: float64, 'META': Date
2019-12-31    204.633865
2020-01-02    209.150269
2020-01-03    208.043610
2020-01-06    211.961807
2020-01-07    212.420410
                 ...
2023-05-24    248.461914
2023-05-25    251.931458
2023-05-26    261.253387
2023-05-30    261.731964
2023-05-31    263.925354
Name: Adj Close, Length: 860, dtype: float64, 'AMZN': Date
2019-12-31     92.391998
2020-01-02     94.900497
2020-01-03     93.748497
2020-01-06     95.143997
2020-01-07     95.343002
                 ...
2023-05-24    116.750000
2023-05-25    115.000000
2023-05-26    120.110001
2023-05-30    121.660004
2023-05-31    120.580002
Name: Adj Close, Length: 860, dtype: float64, 'MSFT': Date
2019-12-31    151.139679
2020-01-02    153.938217
2020-01-03    152.021423
2020-01-06    152.414352
2020-01-07    151.024643
                 ...
2023-05-24    310.853607
2023-05-25    322.808411
2023-05-26    329.711884
2023-05-30    328.047882
2023-05-31    325.254822
Name: Adj Close, Length: 860, dtype: float64}
Dataset created successfully.
Train Data Trend Shape: torch.Size([30, 5])
Valid Data Trend Shape: torch.Size([30, 5])
/home/raikakoki/.local/lib/python3.10/site-packages/torch/backends/cuda/__init__.py:342: FutureWarning: torch.backends.cuda.sdp_kernel() is deprecated. In the future, this context manager will be removed. Please see, torch.nn.attention.sdpa_kernel() for the new context manager, with updated signature.
  warnings.warn(
Epoch 1/10, Trend Training Loss: 0.5515, Trend Validation Loss: 0.1794, Seasonal Training Loss: 0.5207, Seasonal Validation Loss: 0.4767, Residual Training Loss: 0.3870, Residual Validation Loss: 0.3745
Epoch 2/10, Trend Training Loss: 0.2074, Trend Validation Loss: 0.2094, Seasonal Training Loss: 0.2949, Seasonal Validation Loss: 0.3612, Residual Training Loss: 0.2360, Residual Validation Loss: 0.2772
Epoch 3/10, Trend Training Loss: 0.1371, Trend Validation Loss: 0.1692, Seasonal Training Loss: 0.2240, Seasonal Validation Loss: 0.3293, Residual Training Loss: 0.2036, Residual Validation Loss: 0.2523
Epoch 4/10, Trend Training Loss: 0.1037, Trend Validation Loss: 0.1306, Seasonal Training Loss: 0.1841, Seasonal Validation Loss: 0.2826, Residual Training Loss: 0.1950, Residual Validation Loss: 0.2177
Epoch 5/10, Trend Training Loss: 0.0799, Trend Validation Loss: 0.0973, Seasonal Training Loss: 0.1508, Seasonal Validation Loss: 0.2107, Residual Training Loss: 0.1499, Residual Validation Loss: 0.1771
Epoch 6/10, Trend Training Loss: 0.0584, Trend Validation Loss: 0.0924, Seasonal Training Loss: 0.1327, Seasonal Validation Loss: 0.1908, Residual Training Loss: 0.1293, Residual Validation Loss: 0.1557
Epoch 7/10, Trend Training Loss: 0.0553, Trend Validation Loss: 0.0854, Seasonal Training Loss: 0.1108, Seasonal Validation Loss: 0.1800, Residual Training Loss: 0.1165, Residual Validation Loss: 0.1459
Epoch 8/10, Trend Training Loss: 0.0496, Trend Validation Loss: 0.0581, Seasonal Training Loss: 0.0971, Seasonal Validation Loss: 0.1714, Residual Training Loss: 0.1183, Residual Validation Loss: 0.1450
Epoch 9/10, Trend Training Loss: 0.0386, Trend Validation Loss: 0.0442, Seasonal Training Loss: 0.1011, Seasonal Validation Loss: 0.1712, Residual Training Loss: 0.1224, Residual Validation Loss: 0.1540
Epoch 10/10, Trend Training Loss: 0.0351, Trend Validation Loss: 0.0639, Seasonal Training Loss: 0.0839, Seasonal Validation Loss: 0.1689, Residual Training Loss: 0.1097, Residual Validation Loss: 0.1448
/mnt/c/Users/RAIKA KOKI/B4研究/Multi_iTransformer/STLdemo.py:188: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  predicted_trend_aapl = predicted_trend[1][0, :, 0].cpu().numpy().flatten() * std_list_trend[0] + mean_list_trend[0]
/mnt/c/Users/RAIKA KOKI/B4研究/Multi_iTransformer/STLdemo.py:189: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  predicted_seasonal_aapl = predicted_seasonal[1][0, :, 0].cpu().numpy().flatten() * std_list_seasonal[0] + mean_list_seasonal[0]
/mnt/c/Users/RAIKA KOKI/B4研究/Multi_iTransformer/STLdemo.py:190: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  predicted_resid_aapl = predicted_resid[1][0, :, 0].cpu().numpy().flatten() * std_list_resid[0] + mean_list_resid[0]
[169.2439016]
['2023-05-17', '2023-05-18', '2023-05-19', '2023-05-22', '2023-05-23', '2023-05-24', '2023-05-25', '2023-05-26', '2023-05-30', '2023-05-31']
Traceback (most recent call last):
  File "/mnt/c/Users/RAIKA KOKI/B4研究/Multi_iTransformer/STLdemo.py", line 209, in <module>
    plt.plot(predicted_dates, final_predicted_aapl, linestyle='solid', color='red', label='Predicted Price')
  File "/home/raikakoki/.local/lib/python3.10/site-packages/matplotlib/pyplot.py", line 3708, in plot
    return gca().plot(
  File "/home/raikakoki/.local/lib/python3.10/site-packages/matplotlib/axes/_axes.py", line 1779, in plot
    lines = [*self._get_lines(self, *args, data=data, **kwargs)]
  File "/home/raikakoki/.local/lib/python3.10/site-packages/matplotlib/axes/_base.py", line 296, in __call__
    yield from self._plot_args(
  File "/home/raikakoki/.local/lib/python3.10/site-packages/matplotlib/axes/_base.py", line 486, in _plot_args
    raise ValueError(f"x and y must have same first dimension, but "
ValueError: x and y must have same first dimension, but have shapes (10,) and (1,)
Traceback (most recent call last):
  File "/mnt/c/Users/RAIKA KOKI/B4研究/Multi_iTransformer/STLdemo.py", line 209, in <module>
    plt.plot(predicted_dates, final_predicted_aapl, linestyle='solid', color='red', label='Predicted Price')
  File "/home/raikakoki/.local/lib/python3.10/site-packages/matplotlib/pyplot.py", line 3708, in plot
    return gca().plot(
  File "/home/raikakoki/.local/lib/python3.10/site-packages/matplotlib/axes/_axes.py", line 1779, in plot
    lines = [*self._get_lines(self, *args, data=data, **kwargs)]
  File "/home/raikakoki/.local/lib/python3.10/site-packages/matplotlib/axes/_base.py", line 296, in __call__
    yield from self._plot_args(
  File "/home/raikakoki/.local/lib/python3.10/site-packages/matplotlib/axes/_base.py", line 486, in _plot_args
    raise ValueError(f"x and y must have same first dimension, but "
ValueError: x and y must have same first dimension, but have shapes (10,) and (1,)
